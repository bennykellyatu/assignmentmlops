name: MLOPS Assignment Pipeline

on:
  push:
    branches:
      - main
      - development
      - feature/workflow
      - feature/workflow-2
  workflow_dispatch:

jobs:
  # Job 1: Environment Setup
  setup-environment:
    name: Setup Environment
    runs-on: self-hosted
    outputs:
      python-version: ${{ steps.python-setup.outputs.python-version }}
      setup-status: ${{ steps.python-setup.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install Python and Dependencies
        id: python-setup
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip python3-venv
          PYTHON_VERSION=$(python3 --version)
          echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Python installed: $PYTHON_VERSION"
      
      - name: Create Virtual Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Virtual environment created and dependencies installed"

  # Job 2: Data Processing (depends on setup)
  data-processing:
    name: Data Processing
    runs-on: self-hosted
    needs: setup-environment
    outputs:
      data-status: ${{ steps.data-clean.outputs.status }}
      cleaned-data-path: ${{ steps.data-clean.outputs.data-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore Virtual Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
      
      - name: Clean Data
        id: data-clean
        run: |
          source venv/bin/activate
          cd ModelCleaning
          python Cleandata.py
          echo "status=success" >> $GITHUB_OUTPUT
          echo "data-path=ModelCleaning/cleaned_icecreamdata.csv" >> $GITHUB_OUTPUT
          echo "Data cleaning completed"
      
      - name: Verify Cleaned Data
        run: |
          if [ -f "ModelCleaning/cleaned_icecreamdata.csv" ]; then
            echo "Cleaned data file created successfully!"
            echo "File size: $(wc -l ModelCleaning/cleaned_icecreamdata.csv)"
            head -5 ModelCleaning/cleaned_icecreamdata.csv
          else
            echo "Cleaned data file not found!"
            ls -la ModelCleaning/
            exit 1
          fi
      
      - name: Upload Cleaned Data
        uses: actions/upload-artifact@v4
        with:
          name: cleaned-data
          path: ModelCleaning/cleaned_icecreamdata.csv
          retention-days: 1

  # Job 3: Model Training (depends on data processing)
  model-training:
    name: Model Training
    runs-on: self-hosted
    needs: data-processing
    outputs:
      model-status: ${{ steps.train-model.outputs.status }}
      model-path: ${{ steps.train-model.outputs.model-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download Cleaned Data
        uses: actions/download-artifact@v4
        with:
          name: cleaned-data
          path: ModelCleaning/
      
      - name: Verify Downloaded Data
        run: |
          echo "Contents of ModelCleaning directory:"
          ls -la ModelCleaning/
          if [ -f "ModelCleaning/cleaned_icecreamdata.csv" ]; then
            echo "Cleaned data file found!"
            echo "File size: $(wc -l ModelCleaning/cleaned_icecreamdata.csv)"
          else
            echo "Cleaned data file not found!"
            exit 1
          fi
      
      - name: Restore Virtual Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
      
      - name: Train Model
        id: train-model
        run: |
          source venv/bin/activate
          cd ModelCleaning
          python train_test_dataset.py
          MODEL_PATH="ModelCleaning/TemperatureProfitsModel.pkl"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "model-path=$MODEL_PATH" >> $GITHUB_OUTPUT
          echo "Model training completed"
          
      - name: Verify Model File
        run: |
          if [ -f "ModelCleaning/TemperatureProfitsModel.pkl" ]; then
            echo "Model file created successfully"
            ls -la ModelCleaning/TemperatureProfitsModel.pkl
          else
            echo "Model file not found"
            exit 1
          fi
      
      - name: Upload Trained Model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: ModelCleaning/TemperatureProfitsModel.pkl
          retention-days: 1

  # Job 4: Containerization (depends on model training)
  containerization:
    name: Build Container
    runs-on: self-hosted
    needs: model-training
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
      container-status: ${{ steps.build-image.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download Trained Model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: ModelCleaning/
      
      - name: Install Docker
        run: |
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "Docker installed"
          else
            echo "Docker already installed"
          fi
          docker --version

      - name: Build Docker Image
        id: build-image
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:${{ github.sha }}"
          echo "Building image with tag: $IMAGE_TAG"
          
          sudo docker build -t ice-cream-api:latest .
          sudo docker tag ice-cream-api:latest ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest
          sudo docker tag ice-cream-api:latest $IMAGE_TAG
          
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Docker image built: $IMAGE_TAG"
          
          # Verify images were created
          echo "Available Docker images:"
          sudo docker images | grep -E "(ice-cream-api|${{ secrets.DOCKERHUB_USERNAME }})"

      - name: Test Container Locally
        run: |
          sudo docker run -d --name test-container -p 5001:5000 ice-cream-api:latest
          sleep 10
          
          if curl -f http://localhost:5001/health; then
            echo "Container test passed"
          else
            echo "Container test failed"
            sudo docker logs test-container
            exit 1
          fi
          
          sudo docker stop test-container
          sudo docker rm test-container

  # Job 5: Registry Push (depends on containerization)
  registry-push:
    name: Push to Registry
    runs-on: self-hosted
    needs: containerization
    outputs:
      registry-status: ${{ steps.push-image.outputs.status }}
    steps:
      - name: Debug Job Outputs
        run: |
          echo "Containerization job outputs:"
          echo "  image-tag: '${{ needs.containerization.outputs.image-tag }}'"
          echo "  container-status: '${{ needs.containerization.outputs.container-status }}'"
          echo "  GitHub SHA: '${{ github.sha }}'"
          echo "  DockerHub Username: '${{ secrets.DOCKERHUB_USERNAME }}'"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download Trained Model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: ModelCleaning/
      
      - name: Rebuild Image if Needed
        run: |
          echo "Checking if image exists..."
          if ! sudo docker images | grep -q "${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api"; then
            echo "Image not found, rebuilding..."
            sudo docker build -t ice-cream-api:latest .
            sudo docker tag ice-cream-api:latest ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest
            
            # Create SHA tag
            SHA_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:${{ github.sha }}"
            sudo docker tag ice-cream-api:latest $SHA_TAG
            echo "Image rebuilt and tagged as latest and $SHA_TAG"
          else
            echo "Image already exists"
            sudo docker images | grep "${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api"
          fi

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          echo "Logged into Docker Hub"

      - name: Push Images
        id: push-image
        run: |
          echo "Checking image tag from containerization job: '${{ needs.containerization.outputs.image-tag }}'"
          
          # Always push the latest tag
          sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest
          
          # Only push the SHA tag if it exists and is not empty
          if [ -n "${{ needs.containerization.outputs.image-tag }}" ]; then
            echo "Pushing SHA-tagged image: ${{ needs.containerization.outputs.image-tag }}"
            sudo docker push ${{ needs.containerization.outputs.image-tag }}
          else
            echo "No SHA-tagged image to push, creating one now..."
            SHA_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:${{ github.sha }}"
            sudo docker tag ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest $SHA_TAG
            sudo docker push $SHA_TAG
            echo "Pushed SHA-tagged image: $SHA_TAG"
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Images pushed to Docker Hub"

  # Job 6: Deployment (depends on registry push)
  deployment:
    name: Deploy to Swarm
    runs-on: self-hosted
    needs: [model-training, containerization, registry-push]
    outputs:
      deployment-status: ${{ steps.deploy-service.outputs.status }}
    steps:
      - name: Deploy to Docker Swarm
        id: deploy-service
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh-key
          chmod 600 /tmp/ssh-key
          
          echo "Deploying to Docker Swarm..."
          
          ssh -i /tmp/ssh-key -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.SWARM_MANAGER_IP }} << 'EOF'
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest
            
            if docker service ls | grep -q ice-cream-api; then
              echo "Updating existing service..."
              docker service update --image ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest ice-cream-api
            else
              echo "Creating new service..."
              docker service create \
                --name ice-cream-api \
                --replicas 3 \
                --publish 80:5000 \
                --update-config \
                ${{ secrets.DOCKERHUB_USERNAME }}/ice-cream-api:latest
            fi
            
            echo "Waiting for service to be ready..."
            sleep 30
            
            echo "Service Status:"
            docker service ls
            docker service ps ice-cream-api
            
            echo "Testing deployed service..."
            curl -f http://localhost/health || echo "Health check failed"
          EOF
          
          rm /tmp/ssh-key
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Deployment completed"

  # Job 7: Post-Deployment Verification (depends on deployment)
  verification:
    name: Verify Deployment
    runs-on: self-hosted
    needs: deployment
    steps:
      - name: Verify Service Health
        run: |
          echo "Verifying deployment..."
          
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh-key
          chmod 600 /tmp/ssh-key
          
          ssh -i /tmp/ssh-key -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.SWARM_MANAGER_IP }} << 'EOF'
            if docker service ls | grep ice-cream-api | grep -q "3/3"; then
              echo "All replicas are running"
            else
              echo "Not all replicas are running"
              docker service ps ice-cream-api
            fi
            
            echo "Testing API endpoints..."
            curl -f http://localhost/health && echo "Health endpoint working"
            curl -f http://localhost/ && echo "Root endpoint working"
          EOF
          
          rm /tmp/ssh-key
          echo "Verification completed"